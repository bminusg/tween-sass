// BUILT IN MODULES

@use "sass:list"
@use "sass:map"
@use "sass:math"
@use "sass:selector"
@use "sass:string"

// DEFINE CUSTOM CONFIG

$parent: null !default
$activeClass: ".is--tweening" !default

// DEFINE KEYFRAMES FUNCTION

@use "../functions/defineKeyframes" as *

// KEYFRAME DEFAULTS

@use "../keyframes/__defaults" as *

// LIST OF DEFINED KEYFRAME ANIMATION AND PROPERTIES

$keyframes: ()

// TWEEN MIXIN

@mixin tween($tweens...)

    // DEFINE DEFAULT CONFIG

    $props: name, duration, timing-function, iteration-count, direction, fill-mode
    $propDefaults: wait, 1s, linear, 1, normal, forwards
    $propLength: length($props) + 1
    $config: ("name": null,"duration": null,"timing-function": null,"iteration-count": null,"direction": null,"fill-mode": null, "totalDuration": 0, "keyframes": (0%))

    // LOOP THROUGH EVERY TWEEN COMPONENT

    @each $tween in $tweens

        $maxTweenIDX: length($tween)

        // INNER CUSTOM PROPERTY LOOP
        @for $i from 1 to $propLength

            $value: list.nth($propDefaults, $i)
            $prop: list.nth($props, $i)

            // OVERWRITE DEFAULT VALUE IF NAME IS PART OF OF KEYFRAME LIB
            @if $i > 1 and map.has-key($keyframeDefaults, list.nth($tween, 1))
                $defaultValues: map.get($keyframeDefaults,list.nth($tween, 1))

                @if $i <= length($defaultValues) + 1
                    $value: list.nth($defaultValues, $i - 1)

            // OVERWRITE DEFAULT VALUE IF CUSTOM VALUE EXCIST
            @if $i <= $maxTweenIDX
                $value: list.nth($tween, $i)

            // CALC TOTAL DURATION
            @if $i == 2
                $totalDuration: map.get($config, "totalDuration") + $value
                $config: map.set($config, "totalDuration", $totalDuration)

            // CONCAT VALUE TO LIST VALUES
            @if map.get($config,$prop) != null
                $value: list.append(map.get($config,$prop), $value, $separator: comma)

            $config: map.set($config, $prop, $value)

    // CALC START AND END KEYFRAMES

    @for $i from 1 through length($tweens)

        $totalDuration: map.get($config, "totalDuration")
        $keyframes: map.get($config, "keyframes")
        $duration: list.nth(map.get($config, "duration"), $i)

        $amount: math.percentage(math.div($duration, $totalDuration))
        $amount: math.round($amount)

        // SETTING FIRST KEYFRAME

        @if $i == 1
            $config: map.set($config, "keyframes", list.append($keyframes, $amount))

        @if $i > 1
            $previousFrame: list.nth($keyframes, $i)
            $config: map.set($config, "keyframes", list.append($keyframes, $amount + $previousFrame))

        // SETTING LAST FRAME

        @if $i == length($tweens)

            $config: map.set($config, "keyframes", list.append($keyframes, 100%))

    // BUILD ANIMATION NAME

    $animationName: string.unique-id()
    $names: map.get($config, "name")

    // PREVENT KEYFRAME DUPLICATES

    @if not map.has-key($keyframes, $animationName)

        // DEFINE KEYFRAMES

        $keyframes: map.set($keyframes, $animationName, defineKeyframes($animationName, $config)) !global

        // SET ANIMATION

        $keyframes: map.get($keyframes, $animationName)
        $frames: list.nth($keyframes, 1)

        // WRITE KEYFRAMES

        @keyframes #{$animationName}
            @for $i from 1 through length($frames)

                $frame: list.nth($frames, $i)
                $values: list.nth($keyframes, $i + 1)

                #{$frame}
                    @each $key, $value in $values
                        #{$key}: $value

    // DEFINE ANIMATION PROPS

    $selectors: selector.parse(#{&})

    @each $selector in $selectors

        // ADDING PARENT

        @if $parent
            $activeClass: selector.unify($parent, $activeClass)

        // IN CASE OF OVERWRITING 
        // YOU CAN USE A SECOND ACTIVE CLASS OR DATA ATTRIBUTE

        @if length($selector) > 1
            $superSelector: selector.unify($activeClass, list.nth($selector, 1))
            $selector: selector.replace($selector, list.nth($selector, 1) , $superSelector)
        @else
            $selector: selector.nest($activeClass, $selector)

        @at-root #{$selector}
            animation-name: $animationName
            animation-duration: map.get($config, totalDuration)
            animation-fill-mode: forwards
